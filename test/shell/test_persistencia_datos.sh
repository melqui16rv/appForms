#!/bin/bash

# Test de Persistencia de Datos del Formulario
# Este script verifica que los datos del formulario no se pierdan durante la generaci√≥n de c√≥digos

echo "üîÑ Iniciando test de persistencia de datos..."
echo "================================================"

# Colores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Variables
BASE_URL="http://172.30.5.255:8080"
TEST_COUNT=0
PASS_COUNT=0

# Funci√≥n para mostrar resultados
show_result() {
    local test_name="$1"
    local status="$2"
    local message="$3"
    
    TEST_COUNT=$((TEST_COUNT + 1))
    
    if [ "$status" = "PASS" ]; then
        echo -e "${GREEN}‚úÖ PASS${NC} - $test_name"
        PASS_COUNT=$((PASS_COUNT + 1))
    else
        echo -e "${RED}‚ùå FAIL${NC} - $test_name: $message"
    fi
}

# Funci√≥n para test de conectividad b√°sica
test_connectivity() {
    echo "üåê Testing conectividad b√°sica..."
    
    response=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL")
    
    if [ "$response" = "200" ]; then
        show_result "Conectividad del servidor" "PASS"
    else
        show_result "Conectividad del servidor" "FAIL" "HTTP $response"
        return 1
    fi
}

# Test 1: Verificar APIs de validaci√≥n
test_apis() {
    echo "üîß Testing APIs de validaci√≥n..."
    
    # Test API de dise√±os
    response=$(curl -s "$BASE_URL/api/disenos.php")
    if echo "$response" | grep -q "\["; then
        show_result "API Dise√±os disponible" "PASS"
    else
        show_result "API Dise√±os disponible" "FAIL" "No devuelve array JSON"
    fi
    
    # Test API de competencias
    response=$(curl -s "$BASE_URL/api/competencias.php")
    if echo "$response" | grep -q "\["; then
        show_result "API Competencias disponible" "PASS"
    else
        show_result "API Competencias disponible" "FAIL" "No devuelve array JSON"
    fi
    
    # Test API de RAPs
    response=$(curl -s "$BASE_URL/api/raps.php")
    if echo "$response" | grep -q "\["; then
        show_result "API RAPs disponible" "PASS"
    else
        show_result "API RAPs disponible" "FAIL" "No devuelve array JSON"
    fi
}

# Test 2: Verificar que las funciones JavaScript corregidas est√°n presentes
test_javascript_functions() {
    echo "üìù Testing correcciones en JavaScript..."
    
    if grep -q "Solo resetear el modo de edici√≥n, no borrar el formulario" "/Users/melquiromero/Documents/GitHub/appForms/js/main.js"; then
        show_result "Correcci√≥n validateDisenoExists" "PASS"
    else
        show_result "Correcci√≥n validateDisenoExists" "FAIL" "Comentario de correcci√≥n no encontrado"
    fi
    
    if grep -q "versionPrograma.*diseno.versionPrograma" "/Users/melquiromero/Documents/GitHub/appForms/js/main.js"; then
        show_result "Correcci√≥n fillDisenoForm typo" "PASS"
    else
        show_result "Correcci√≥n fillDisenoForm typo" "FAIL" "Correcci√≥n del typo no encontrada"
    fi
    
    if grep -q "NO limpiar el formulario en caso de error" "/Users/melquiromero/Documents/GitHub/appForms/js/main.js"; then
        show_result "Preservaci√≥n de datos en errores" "PASS"
    else
        show_result "Preservaci√≥n de datos en errores" "FAIL" "Comentarios de preservaci√≥n no encontrados"
    fi
    
    if grep -q "clearDisenoCodesOnly" "/Users/melquiromero/Documents/GitHub/appForms/js/main.js"; then
        show_result "Funci√≥n clearDisenoCodesOnly a√±adida" "PASS"
    else
        show_result "Funci√≥n clearDisenoCodesOnly a√±adida" "FAIL" "Nueva funci√≥n no encontrada"
    fi
}

# Test 3: Verificar estructura de formularios
test_form_structure() {
    echo "üìã Testing estructura de formularios..."
    
    # Verificar que el archivo principal existe
    if [ -f "/Users/melquiromero/Documents/GitHub/appForms/index.php" ]; then
        show_result "Archivo index.php existe" "PASS"
    else
        show_result "Archivo index.php existe" "FAIL" "Archivo no encontrado"
    fi
    
    # Verificar que los formularios tienen IDs correctos
    if grep -q 'id="disenoForm"' "/Users/melquiromero/Documents/GitHub/appForms/index.php"; then
        show_result "Formulario de dise√±os configurado" "PASS"
    else
        show_result "Formulario de dise√±os configurado" "FAIL" "ID del formulario no encontrado"
    fi
    
    if grep -q 'id="competenciaForm"' "/Users/melquiromero/Documents/GitHub/appForms/index.php"; then
        show_result "Formulario de competencias configurado" "PASS"
    else
        show_result "Formulario de competencias configurado" "FAIL" "ID del formulario no encontrado"
    fi
    
    if grep -q 'id="rapForm"' "/Users/melquiromero/Documents/GitHub/appForms/index.php"; then
        show_result "Formulario de RAPs configurado" "PASS"
    else
        show_result "Formulario de RAPs configurado" "FAIL" "ID del formulario no encontrado"
    fi
}

# Test 4: Verificar event listeners
test_event_listeners() {
    echo "üéØ Testing event listeners..."
    
    if grep -q "addEventListener('input', generateCodigoDiseno)" "/Users/melquiromero/Documents/GitHub/appForms/js/main.js"; then
        show_result "Event listeners de dise√±os" "PASS"
    else
        show_result "Event listeners de dise√±os" "FAIL" "Event listeners no encontrados"
    fi
    
    if grep -q "addEventListener('input', generateCodigoCompetencia)" "/Users/melquiromero/Documents/GitHub/appForms/js/main.js"; then
        show_result "Event listeners de competencias" "PASS"
    else
        show_result "Event listeners de competencias" "FAIL" "Event listeners no encontrados"
    fi
    
    if grep -q "addEventListener('input', generateCodigoRap)" "/Users/melquiromero/Documents/GitHub/appForms/js/main.js"; then
        show_result "Event listeners de RAPs" "PASS"
    else
        show_result "Event listeners de RAPs" "FAIL" "Event listeners no encontrados"
    fi
}

# Test 5: Verificar mejoras en mensajes de error
test_error_messages() {
    echo "‚ö†Ô∏è  Testing mejoras en mensajes de error..."
    
    if grep -q "Verifique su conexi√≥n e intente nuevamente" "/Users/melquiromero/Documents/GitHub/appForms/js/main.js"; then
        show_result "Mensajes de error mejorados" "PASS"
    else
        show_result "Mensajes de error mejorados" "FAIL" "Mensajes mejorados no encontrados"
    fi
    
    if grep -q "Solo limpiar despu√©s de guardar exitosamente" "/Users/melquiromero/Documents/GitHub/appForms/js/main.js"; then
        show_result "Comentarios de clarificaci√≥n" "PASS"
    else
        show_result "Comentarios de clarificaci√≥n" "FAIL" "Comentarios no encontrados"
    fi
}

# Ejecutar todos los tests
echo "üöÄ Ejecutando tests de persistencia de datos..."
echo

# Test de conectividad primero
test_connectivity
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Error de conectividad. Verifique que el servidor est√© ejecut√°ndose en $BASE_URL${NC}"
    echo "üí° Para iniciar el servidor: cd /Users/melquiromero/Documents/GitHub/appForms && php -S 172.30.5.255:8080"
    exit 1
fi

# Ejecutar resto de tests
test_apis
test_javascript_functions
test_form_structure
test_event_listeners
test_error_messages

# Mostrar resumen
echo
echo "================================================"
echo "üìä RESUMEN DE TESTS DE PERSISTENCIA DE DATOS"
echo "================================================"
echo -e "Total de tests: ${YELLOW}$TEST_COUNT${NC}"
echo -e "Tests exitosos: ${GREEN}$PASS_COUNT${NC}"
echo -e "Tests fallidos: ${RED}$((TEST_COUNT - PASS_COUNT))${NC}"

if [ $PASS_COUNT -eq $TEST_COUNT ]; then
    echo -e "${GREEN}üéâ ¬°Todos los tests pasaron! Los problemas de persistencia de datos han sido resueltos.${NC}"
    echo
    echo "‚úÖ Correcciones implementadas:"
    echo "   ‚Ä¢ Los formularios NO se limpian autom√°ticamente durante la generaci√≥n de c√≥digos"
    echo "   ‚Ä¢ Los datos se preservan cuando hay errores de conexi√≥n o validaci√≥n"
    echo "   ‚Ä¢ Se corrigi√≥ el typo en versionPrograma"
    echo "   ‚Ä¢ Se a√±adi√≥ funci√≥n clearDisenoCodesOnly para limpieza selectiva"
    echo "   ‚Ä¢ Se mejoraron los mensajes de error"
    echo "   ‚Ä¢ Se separaron las funciones de limpieza autom√°tica vs manual"
    echo
    echo "üîß Accede a la aplicaci√≥n en: $BASE_URL"
else
    echo -e "${RED}‚ùå Algunos tests fallaron. Revise los detalles arriba.${NC}"
    exit 1
fi
